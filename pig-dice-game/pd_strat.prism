// Model for Pig Dice game
// This is a turn-based game for 2 players
// The player throws two dice. In a turn the player can either stop or throw the dice again.
// if the dice throw is 1 and sth else then the player loses all points in that turn and the turn ends
// if the dice throw is 1 and 1 all points accumulated until that turn are lost and the turn ends
// The other player then can do the same
// The game ends when one of the player accumulates win_score points.

// This is the startegy for playing the game
mdp

const win_score;
const lower_limit; // should be -72
const upper_limit; // should be 74
const throw_safe_score; // should be 19

module pdg // module for pig dice game
    // @turn - flag to mark turn of player 1 and 2
    // @score1 - overall score of player 1
    // @score2 - overall score of player 2
    // @tscore1 - turn score of player 1
    // @tscore2 - turn score of player 2


    // values to acknowledge turn of that player, since the player1 starts then turn is 1 initially
    turn : [1..3] init 1;
    score1 : [0..win_score] init 0;
    score2 : [0..win_score] init 0;
    tscore1 : [0..win_score] init 0;
    tscore2 : [0..win_score] init 0;
	winner : [0..2] init 0;

	// player 1 ; try to combine throw to win or safe throw
	// ========= new bit starts here ====
    [throw1] turn=1 & (
        (score2 - score1 <= lower_limit & tscore1 < 100 - score1) |   //for differences smalller than -60, player 1 having more
                                                              //points
        (score2 - score1 >= upper_limit & tscore1 < 100 - score1)  |    //for differences greater than 60, player 2 leading
        (score2 - score1 < upper_limit & score2 - score1 > lower_limit  & tscore1 < throw_safe_score)   //average found
        // ========= new bit ends here ====
         //throw to win -> remaining is 96
    ) -> 1/36 : (score1'=0) & (tscore1'=0) & (turn'=2) // 1 and 1
                        + 2/36 : (turn'=2) & (tscore1'=0) // 1 and 2 or 2 and 1
                        + 2/36 : (turn'=2) & (tscore1'=0) // 1 and 3 or 3 and 1
                        + 1/36 : (tscore1'=min(tscore1+4,win_score)) // 2 and 2
                        + 2/36 : (turn'=2) & (tscore1'=0) // 1 and 4 or 4 and 1
                        + 2/36 : (tscore1'=min(tscore1+5, win_score)) // 2 and 3 or 3 and 2
                        + 2/36 : (turn'=2) & (tscore1'=0) // 1 and 5 or 5 and 1
                    	+ 3/36 : (tscore1'=min(tscore1+6, win_score)) // 2 and 4 or 3 and 3 or 4 and 2
                        + 2/36 : (turn'=2) & (tscore1'=0) // 1 and 6 or 6 and 1
                        + 4/36 : (tscore1'=min(tscore1+7,win_score)) // 2 and 5 or 3 and 4 or 4 and 3 or 5 and 2
                        + 5/36 : (tscore1'=min(tscore1+8, win_score)) // 2 and 6 or 3 and 5 or 4 and 4 or 5 and 3 or 6 and 2
                        + 4/36 : (tscore1'=min(tscore1+9, win_score)) // 3 and 6 or 4 and 5 or 5 and 4 or 6 and 3
                        + 3/36 : (tscore1'=min(tscore1+10, win_score)) // 4 and 6 or 5 and 5 or 6 and 4
                        + 2/36 : (tscore1'=min(tscore1+11, win_score)) //  5 and 6 or 6 and 5
                        + 1/36 : (tscore1'=min(tscore1+12, win_score)); // 6 and 6

	[notthrow1] turn=1 & score1+tscore1>=win_score -> (turn'=3) & (winner'=1) & (score1'=0) & (tscore1'=0) & (score2'=0) & (tscore2'=0);
	[notthrow1] turn=1 &  (
	                        (score2 - score1 <= -72 & tscore1 >= 100 - score1) |
	                        (score2 - score1 >= 74 & tscore1 >= 100 - score1)  |
	                        (score2 - score1 < 74 & score2 - score1 > -72  & tscore1 > 19)
	                   )
	                   & score1+tscore1<win_score -> (turn'=2) & (score1'=score1+tscore1) & (tscore1'=0);

	// player 2
	[throw2] turn=2 -> 1/36 : (score2'=0) & (tscore2'=0) & (turn'=1) // 1 and 1
                        + 2/36 : (turn'=1) & (tscore2'=0) // 1 and 2 or 2 and 1
                        + 2/36 : (turn'=1) & (tscore2'=0) // 1 and 3 or 3 and 1
                        + 1/36 : (tscore2'=min(tscore2+4,win_score)) // 2 and 2
                        + 2/36 : (turn'=1) & (tscore2'=0) // 1 and 4 or 4 and 1
                        + 2/36 : (tscore2'=min(tscore2+5, win_score)) // 2 and 3 or 3 and 2
                        + 2/36 : (turn'=1) & (tscore2'=0) // 1 and 5 or 5 and 1
                    	+ 3/36 : (tscore2'=min(tscore2+6, win_score)) // 2 and 4 or 3 and 3 or 4 and 2
                        + 2/36 : (turn'=1) & (tscore2'=0) // 1 and 6 or 6 and 1
                        + 4/36 : (tscore2'=min(tscore2+7,win_score)) // 2 and 5 or 3 and 4 or 4 and 3 or 5 and 2
                        + 5/36 : (tscore2'=min(tscore2+8, win_score)) // 2 and 6 or 3 and 5 or 4 and 4 or 5 and 3 or 6 and 2
                        + 4/36 : (tscore2'=min(tscore2+9, win_score)) // 3 and 6 or 4 and 5 or 5 and 4 or 6 and 3
                        + 3/36 : (tscore2'=min(tscore2+10, win_score)) // 4 and 6 or 5 and 5 or 6 and 4
                        + 2/36 : (tscore2'=min(tscore2+11, win_score)) //  5 and 6 or 6 and 5
                        + 1/36 : (tscore2'=min(tscore2+12, win_score)); // 6 and 6

    [notthrow2] turn=2 & score2+tscore2>=win_score -> (turn'=3) & (winner'=2) & (score1'=0) & (tscore1'=0) & (score2'=0) & (tscore2'=0);
	[notthrow2] turn=2 & score2+tscore2<win_score -> (turn'=1) & (score2'=score2+tscore2) & (tscore2'=0);

endmodule